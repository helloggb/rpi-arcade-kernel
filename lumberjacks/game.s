; =========================================================
; 
; Aracde Kernel Kit
; AArch64 Assembly Language
;
; Lumberjacks
;
; About:
;
;
;
; Contact Information:
;
;   Jeff Panici
;   Email: jeff@nybbles.io
;   Website: https://nybbles.io
;   Live Stream: https://twitch.tv/nybblesio
;
; Copyright (C) 2018 Jeff Panici
; All rights reserved.
;
; This is free software available under the MIT license.
;
; See the LICENSE file in the root directory 
; for details about this license.
;
; =========================================================
code64
processor   cpu64_v8
format      binary as 'img'

; =========================================================
;
; Constants Section
;
; =========================================================
SPR_TILE        = 0
SPR_Y_POS       = 4
SPR_X_POS       = 8
SPR_PAL         = 12
SPR_FLAGS       = 13
SPR_RESERVE1    = 14
SPR_RESERVE2    = 15
SPR_USER1       = 16
SPR_USER2       = 20
SPR_BITMAP      = 24
SPR_CON_SZ      = 1048
SPR_CON_COUNT   = 128

F_SPR_NONE      = 00000000_00000000_00000000_00000000b
F_SPR_CHANGED   = 00000000_00000000_00000000_00000001b
F_SPR_HFLIP     = 00000000_00000000_00000000_00000010b
F_SPR_VFLIP     = 00000000_00000000_00000000_00000100b
F_SPR_ENABLED   = 00000000_00000000_00000000_00001000b

BG_TILE         = 0
BG_PAL          = 4
BG_FLAGS        = 5
BG_RESERVE1     = 6
BG_RESERVE2     = 7
BG_USER1        = 8
BG_USER2        = 12
BG_BITMAP       = 16
BG_CON_SZ       = 272
BG_ROW_COUNT    = 30
BG_COL_COUNT    = 32

F_BG_NONE       = 00000000_00000000_00000000_00000000b
F_BG_CHANGED    = 00000000_00000000_00000000_00000001b

; =========================================================
;
; Game Entry Point
;
; =========================================================
include     'macros.s'
include     'kernel_abi.s'
include     'constants.s'

org GAME_BOTTOM

game_init_vector: 
    dw  game_init

game_tick_vector: 
    dw  game_tick 

strpad      title, 32, "Lumberjacks"
strpad      author, 32, "Jeff Panici"
version:    db 1
revision:   db 2

; =========================================================
;
; Macros Section
;
; =========================================================
macro spr number {
    adr         x25, sprite_control
    mov         w26, SPR_CON_SZ
    mov         w27, number
    madd        w25, w26, w27, w25
}

macro spr_pos ypos, xpos {
    mov         w26, ypos
    mov         w27, xpos
    str         w26, [x25, SPR_Y_POS]
    str         w27, [x25, SPR_X_POS]
}

macro spr_addx pixels {
    ldr         w26, [x25, SPR_X_POS]
    add         w26, w26, pixels
    str         w26, [x25, SPR_X_POS]
}

macro spr_subx pixels {
    ldr         w26, [x25, SPR_X_POS]
    sub         w26, w26, pixels
    str         w26, [x25, SPR_X_POS]
}

macro spr_addy pixels {
    ldr         w26, [x25, SPR_Y_POS]
    add         w26, w26, pixels
    str         w26, [x25, SPR_Y_POS]
}

macro spr_suby pixels {
    ldr         w26, [x25, SPR_Y_POS]
    sub         w26, w26, pixels
    str         w26, [x25, SPR_Y_POS]
}

macro spr_tile tile {
    mov         w26, tile
    str         w26, [x25, SPR_TILE]
}

macro spr_pal pal {
    mov         w26, pal
    strb        w26, [x25, SPR_PAL]
}

macro spr_flags flags {
    mov         w26, flags
    strb        w26, [x25, SPR_FLAGS]
}

macro spr_user1 data {
    mov         w26, data
    str         w26, [x25, SPR_USER1]
}

macro spr_user2 data {
    mov         w26, data
    str         w26, [x25, SPR_USER2]
}

align 4

include     'util.s'

; =========================================================
;
; bg_set
;
; stack:
;   src address
;   palette
;
; registers:
;   (none)
;
; =========================================================
bg_set:
    sub         sp, sp, #64
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]
    ldp         x0, x1, [sp, #64]
    adr         x2, background_control
    mov         w3, BG_ROW_COUNT * BG_COL_COUNT
    mov         w5, F_BG_CHANGED
.loop:
    ldr         w4, [x0], 4
    str         w4, [x2, BG_TILE]
    strb        w1, [x2, BG_PAL]
    ldrb        w4, [x2, BG_FLAGS]
    orr         w4, w4, w5
    strb        w4, [x2, BG_FLAGS]
    add         x2, x2, BG_CON_SZ
    subs        w3, w3, 1
    b.ne        .loop
    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    add         sp, sp, #80
    ret

macro bg_set addr, pal {
    sub         sp, sp, #16
    adr         x25, addr
    mov         w26, pal
    stp         x25, x26, [sp]
    bl          bg_set
}

; =========================================================
;
; bg_copy
;
; stack:
;   dest address
;   src address
;   y pos
;   x pos
;
; registers:
;   (none)
;
; =========================================================
bg_copy:        
    sub         sp, sp, #64
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]

    ldp         x0, x1, [sp, #64]
    ldp         x2, x3, [sp, #80]

    mov         w4, SCREEN_WIDTH
    madd        w4, w2, w4, w3
    add         w0, w0, w4

    mov         w4, TILE_HEIGHT
.raster:    
    mov         w5, TILE_WIDTH
.pixel:
    ldrb        w6, [x1], 1
    strb        w6, [x0], 1
    subs        w5, w5, 1
    b.ne        .pixel
    add         w0, w0, SCREEN_WIDTH - TILE_WIDTH
    subs        w4, w4, 1
    b.ne        .raster

    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    add         sp, sp, #96
    ret

macro bg_copy page_addr, src_addr, ypos, xpos {
    sub         sp, sp, #32
    mov         w25, page_addr
    mov         w26, src_addr
    stp         x25, x26, [sp]
    mov         w25, ypos
    mov         w26, xpos
    stp         x25, x26, [sp, #16]
    bl          bg_copy
}

; =========================================================
;
; bg_tile
;
; stack:
;   buffer address
;   flags
;   tile
;   palette
;
; registers:
;   (none)
;
; =========================================================
bg_tile:
    sub         sp, sp, #80
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]
    stp         x7, x8, [sp, #64]

    ldp         x0, x1, [sp, #80]
    ldp         x2, x3, [sp, #96]

    mov         w4, TILE_BYTES
    mul         w2, w2, w4
    
    mov         w4, PALETTE_SIZE
    mul         w3, w3, w4

    adr         x4, timber_bg
    add         w4, w4, w2    
    mov         w5, TILE_HEIGHT * TILE_WIDTH
.pixel:
    ldrb        w7, [x4], 1
    add         w7, w7, w3
    strb        w7, [x0], 1
    subs        w5, w5, 1
    b.ne        .pixel

    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    ldp         x7, x8, [sp, #64]
    add         sp, sp, #112
    ret

macro bg_tile addr, flags, tile, pal {
    sub         sp, sp, #32
    mov         w25, addr
    mov         w26, flags
    stp         x25, x26, [sp]
    mov         w25, tile
    mov         w26, pal
    stp         x25, x26, [sp, #16]
    bl          bg_tile
}

; =========================================================
;
; bg_update
;
; stack:
;   (none)
;   
; registers:
;   (none)
;
; =========================================================
bg_update:
    sub         sp, sp, #80
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]
    stp         x7, x8, [sp, #64]

    adr         x0, background_control        
    mov         w1, 0              ; y
    mov         w2, 0              ; x 
    mov         w3, BG_ROW_COUNT
.row:        
    mov         w4, BG_COL_COUNT
.column:
    ldrb        w5, [x0, BG_FLAGS]
    tst         w5, F_BG_CHANGED
    b.eq        .next
    ldr         w6, [x0, BG_TILE]
    ldrb        w7, [x0, BG_PAL]
    add         w8, w0, BG_BITMAP
    bg_tile     w8, w5, w6, w7
    bic         w5, w5, F_BG_CHANGED
    strb        w5, [x0, BG_FLAGS]

    ; XXX: this is for testing only!
    ;       will change this to be part of a dma cb chain
    adr         x5, bg_buffer
    bg_copy     w5, w8, w1, w2

.next:
    add         w0, w0, BG_CON_SZ
    add         w2, w2, TILE_WIDTH
    subs        w4, w4, 1
    b.ne        .column

    mov         w2, 0
    add         w1, w1, TILE_HEIGHT
    subs        w3, w3, 1
    b.ne        .row

    ; invoke dma on head of tile blit list
    ; wait on tile blit dmas

    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    ldp         x7, x8, [sp, #64]
    add         sp, sp, #80
    ret

macro bg_update {
    bl          bg_update
}

; =========================================================
;
; fg_reset
;
; stack:
;   (none)
;
; registers:
;   (none)
;
; =========================================================
fg_reset:
    sub         sp, sp, #32
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    adr         x0, sprite_control
    mov         w1, SPR_CON_COUNT
.loop:
    mem_fill8   w0, SPR_CON_SZ, 0
    add         w0, w0, SPR_CON_SZ
    subs        w1, w1, 1
    b.ne        .loop
    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    add         sp, sp, #32
    ret

macro fg_reset {
    bl          fg_reset
}

; =========================================================
;
; fg_spr
;
; stack:
;   page address
;   src address
;   y pos
;   x pos
;
; registers:
;   (none)
;
; =========================================================
fg_spr:        
    sub         sp, sp, #64
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]
    ldp         x0, x1, [sp, #64]
    ldp         x2, x3, [sp, #80]
    mov         w4, SCREEN_WIDTH
    madd        w4, w2, w4, w3
    add         w0, w0, w4
    mov         w4, SPRITE_HEIGHT
.raster:    
    mov         w5, SPRITE_WIDTH
.pixel:
    ldrb        w6, [x1], 1
    cbz         w6, .skip
    strb        w6, [x0]
.skip:  
    add         w0, w0, 1
    subs        w5, w5, 1
    b.ne        .pixel
    add         w0, w0, SCREEN_WIDTH - SPRITE_WIDTH
    subs        w4, w4, 1
    b.ne        .raster
    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    add         sp, sp, #96
    ret

macro fg_spr page_addr, src_addr, ypos, xpos {
    sub         sp, sp, #32
    mov         w25, page_addr
    mov         w26, src_addr
    stp         x25, x26, [sp]
    mov         w25, ypos
    mov         w26, xpos
    stp         x25, x26, [sp, #16]
    bl          fg_spr
}

; =========================================================
;
; fg_tile
;
; stack:
;   buffer address
;   flags
;   tile
;   palette
;
; registers:
;   (none)
;
; =========================================================
fg_tile:        
    sub         sp, sp, #80
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]
    stp         x7, x8, [sp, #64]
    ldp         x0, x1, [sp, #80]
    ldp         x2, x3, [sp, #96]
    mov         w4, SPRITE_BYTES
    mul         w2, w2, w4
    mov         w4, PALETTE_SIZE
    mul         w3, w3, w4
    adr         x4, timber_fg
    add         w4, w4, w2
    mov         w2, SPRITE_HEIGHT * SPRITE_WIDTH
.pixel:
    ldrb        w6, [x4], 1
    add         w6, w6, w3
    strb        w6, [x0], 1
    subs        w2, w2, 1
    b.ne        .pixel
    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    ldp         x7, x8, [sp, #64]
    add         sp, sp, #112
    ret

macro fg_tile addr, flags, tile, pal {
    sub         sp, sp, #32
    mov         w25, addr
    mov         w26, flags
    stp         x25, x26, [sp]
    mov         w25, tile
    mov         w26, pal
    stp         x25, x26, [sp, #16]
    bl          fg_tile
}

; =========================================================
;
; fg_update
;
; stack:
;   frame buffer page address
;   pad
;
; registers:
;   (none)
;
; =========================================================
fg_update:
    sub         sp, sp, #80
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]
    stp         x3, x4, [sp, #32]
    stp         x5, x6, [sp, #48]
    stp         x7, x8, [sp, #64]
    ldp         x6, x7, [sp, #80]
    adr         x0, sprite_control
    mov         w1, SPR_CON_COUNT
.loop:
    add         w3, w0, SPR_BITMAP
    ldrb        w2, [x0, SPR_FLAGS]
    tst         w2, F_SPR_ENABLED
    b.eq        .next
    tst         w2, F_SPR_CHANGED
    b.eq        .blit    
    ldr         w4, [x0, SPR_TILE]
    ldrb        w5, [x0, SPR_PAL]
    fg_tile     w3, w2, w4, w5
    bic         w2, w2, F_SPR_CHANGED
    strb        w2, [x0, SPR_FLAGS]
.blit:
    ldr         w4, [x0, SPR_Y_POS]
    ldr         w5, [x0, SPR_X_POS]
    fg_spr      w6, w3, w4, w5
.next:    
    add         w0, w0, SPR_CON_SZ
    subs        w1, w1, 1
    b.ne        .loop
    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    ldp         x3, x4, [sp, #32]
    ldp         x5, x6, [sp, #48]
    ldp         x7, x8, [sp, #64]
    add         sp, sp, #96
    ret

macro fg_update page_addr {
    sub         sp, sp, #16
    mov         w25, page_addr
    mov         w26, 0
    stp         x25, x26, [sp]
    bl          fg_update
}

; =========================================================
;
; game_update
;
; stack:
;   (none)
;   
; registers:
;   (none)
;
; =========================================================
game_update:
    sub         sp, sp, #16
    stp         x0, x30, [sp]

    ldp         x0, x30, [sp]
    add         sp, sp, #16
    ret

macro game_update {
    bl          game_update
}

; =========================================================
;
; game_init
;
; stack:
;   (none)
;   
; registers:
;   (none)
;
; =========================================================
game_init:
    sub         sp, sp, #16
    stp         x0, x30, [sp]
    fg_reset   
    ;bg_set      title_bg, 1
    bg_set      playfield_bg, 1
    spr         0
    spr_pos     256, 128
    spr_flags   F_SPR_CHANGED or F_SPR_ENABLED
    spr_tile    1
    spr         1
    spr_pos     288, 128
    spr_tile    2
    spr_flags   F_SPR_CHANGED or F_SPR_ENABLED
    ldp         x0, x30, [sp]
    add         sp, sp, #16
    ret

; =========================================================
;
; game_tick
;
; stack:
;   (none)
;   
; registers:
;   (none)
;
; =========================================================
game_tick:
    sub         sp, sp, #32
    stp         x0, x30, [sp]
    stp         x1, x2, [sp, #16]

    game_update
    bg_update

    ; XXX: this is temporary to test everything
    ;      -and- then we'll introduce dma to break it ;-)
    adr         x1, bg_buffer
    mem_copy64  w1, w0, SCREEN_BYTES / 8
    
    fg_update   w0

    ldp         x0, x30, [sp]
    ldp         x1, x2, [sp, #16]
    add         sp, sp, #32
    ret

; =========================================================
;
; Background Map Data Section
;
; =========================================================
title_bg:
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $12a, $12b, $12c, $12d, $12e, $12f, $130, $131, $132, $133, $134, $135, $136, $137, $1f3, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $145, $144, $143, $142, $141, $140, $13f, $13e, $13d, $13c, $13b, $13a, $139, $138, $1f2, $1f1, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $146, $147, $148, $149, $14a, $14b, $14c, $14d, $14e, $14f, $150, $151, $152, $153, $1ef, $1f0, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $147, $000, $15e, $15d, $15c, $15b, $15a, $159, $158, $157, $156, $155, $154, $1ee, $1ed, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $147, $000, $15e, $15f, $160, $161, $162, $163, $164, $165, $166, $167, $168, $1eb, $1ec, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $147, $000, $15e, $172, $171, $170, $16f, $16e, $16d, $16c, $16b, $16a, $169, $1ea, $1e9, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $147, $173, $174, $175, $176, $177, $178, $179, $17a, $17b, $17c, $17d, $17e, $1e7, $1e8, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $18a, $189, $188, $187, $186, $000, $000, $000, $000, $000, $181, $180, $17f, $1e6, $1e5, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $18b, $18c, $18d, $18e, $000, $000, $000, $000, $000, $000, $000, $000, $000, $196, $1e4, $1e3, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $1a0, $19f, $19e, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $1e1, $1e2, $3b5, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $1a1, $1a2, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $1de, $1df, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $1b9, $1b8, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $1dd, $1dc, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $03a, $043, $04f, $050, $059, $052, $049, $047, $048, $054, $000, $04d, $043, $04d, $04c, $058, $058, $058, $049, $056, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $042, $041, $04c, $04c, $059, $000, $04d, $049, $044, $057, $041, $059, $000, $04d, $046, $047, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $041, $04c, $04c, $000, $052, $049, $047, $048, $054, $053, $000, $052, $045, $053, $045, $052, $056, $045, $044, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000

playfield_bg:
    ;    01    02    03    04    05    06   07     08    09    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32
    dw  $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $011, $012, $013, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a
    dw  $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $014, $015, $016, $017, $027, $028, $027, $028, $028, $027, $025, $026, $024, $023, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a
    dw  $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $018, $019, $01a, $02b, $02a, $029, $029, $029, $029, $02a, $02b, $029, $02c, $02d, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a, $00a
    dw  $0a8, $00a, $0aa, $0ab, $0ac, $0ad, $0ae, $0af, $01c, $01d, $01e, $01f, $02f, $02f, $0bf, $05d, $01f, $02f, $05c, $05b, $02f, $02e, $0aa, $0b0, $0b1, $0b2, $0b3, $0b4, $0aa, $00a, $00a, $0a8
    dw  $0a7, $00a, $0aa, $009, $009, $009, $009, $009, $082, $064, $063, $062, $061, $060, $05f, $05f, $05f, $05f, $069, $060, $061, $062, $063, $064, $082, $009, $009, $009, $009, $009, $0aa, $0a7
    dw  $0a6, $09a, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0a5, $09b, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0a3, $0a4, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0a2, $09e, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0a1, $09f, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0b5, $0b6, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $01b, $0cc, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0d4, $0d3, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0fd, $003, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $003, $003, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $003, $003, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $003, $0ed, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $003, $0f6, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0f8, $0f9, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0f6, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $0f4, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $022, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $022, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $021, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000
    dw  $000, $000, $000, $000, $000, $000, $000, $022, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $022, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000, $000

; =========================================================
;
; Bitmap Data Section
;
; =========================================================
timber_fg:
    file    'assets/timfg.bin'

timber_bg:
    file    'assets/timbg.bin'

; =========================================================
;
; Control Data Section
;
; =========================================================
align 4
sprite_control:
rept 128 {
    rw  1       ; tile number
    rw  1       ; y position
    rw  1       ; x position
    rb  1       ; palette # 0-3
    rb  1       ; flags
    rb  2       ; reserved
    rw  1       ; user data 1
    rw  1       ; user data 2
    rb  1024
}

align 4
background_control:
rept 960 {
    rw  1       ; tile number
    rb  1       ; palette # 0-3
    rb  1       ; flags
    rb  2       ; reserved
    rw  1       ; user data 1
    rw  1       ; user data 2
    rb  256
}

align 8
bg_buffer:
    rb  SCREEN_WIDTH * SCREEN_HEIGHT

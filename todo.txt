TODO LIST
---------

Admin
------

- need a nice name for this project
- project website
- write up a really good README.md

Questions & Ponderings
----------------------
- UBER IMPORTANT: implement 64-bit exception table vectors for IRQ & FIRQ at a minimum
    ; Set fake_vsync_isr=1 in config.txt and I will trigger the SMI interrupt (48) from my vsync callback.
    ; In your ISR, you should write 0 to SMICS (0x7E600000/0x20600000) to clear it.

- what commands do we want?

Tasks
-----

- FIX: joy_read is probably clocking the controller way too fast. Use ARM_TIMER for better control.

- FINISH: find_command

- refactor current token parser into function

- implement parameter matching, calling next_token

- implement base conversion from string to word


KERNEL
------

    **** update this section so it's more aligned with current implementation

 $40000000:     stack start
                core0: $ffff

                core1: $ffff

                core2: $ffff

                core3: $ffff

 $ffff:         top of our code (not fixed, just an example)



 $1010:         game engine tick vector (pointer)
 $1008:         game initialize vector (pointer)
 $1000:         reserved 64-bit

                1. init everything
                loop:
                    1. poll uart

                    2. poll timer
                        VBLANK-like timer:
                            start timer for runaway game;
                                if expired, jump to start of kernel loop

                            if (game engine tick vector) != nullptr
                                call (game engine tick vector)

                    3. process commands
                        INSTALL:
                            1. read bytes from uart and pokes starting at $1000
                            2. call game initialize vector

                    4. push debug state out, if enabled
                end loop

$0000:          bootloader start

DONE
----
- make draw_string support transparency
- write a draw_tile function -- basically draw_stamp but adjusted for background
- write a clear_buffer function to fill video memory with a byte
- create a caret data structure & draw function
    1. draw_hline function
    2. draw_vline function
- create sprite control "ram"
    dup (128)
        - dw ypos
        - dw xpos
        - dw tile
        - dw palette
        - dw flags
        - dw userpointer
- create background control "ram"
- create an "I/O" area in ram
    - joy1  dw
    - joy2  dw
    - sound control RAM 256 bytes ---> core1 processor loop
- create palette control "ram"
    1. almost done?
- uart_init function
- uart_getc function
- uart_putc function
- uart_putstr function
